import type { Item, ItemsResponse } from './types'
import type { Response, Request } from 'express'

const express = require('express')
const app = express()
const port = 8000

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
const TOTAL_ITEMS = 1_000_000;
const PAGE_SIZE = 20;

// –°–ª—É—á–∞–π–Ω—ã–π seed –æ—Ç 10 –¥–æ 50 –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
const SEED = Math.floor(Math.random() * 41) + 10; // –æ—Ç 10 –¥–æ 50
console.log(`üé≤ –°–ª—É—á–∞–π–Ω—ã–π SEED –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${SEED}`);

// –†—É—Å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
const NAMES = [
    '–ê–ª–µ–∫—Å–µ–π', '–ú–∞—Ä–∏—è', '–î–º–∏—Ç—Ä–∏–π', '–ï–ª–µ–Ω–∞', '–°–µ—Ä–≥–µ–π',
    '–û–ª—å–≥–∞', '–ò–≤–∞–Ω', '–ù–∞—Ç–∞–ª—å—è', '–ê–Ω–¥—Ä–µ–π', '–¢–∞—Ç—å—è–Ω–∞',
    '–ö–∏—Ä–∏–ª–ª', '–Æ–ª–∏—è', '–í–∏–∫—Ç–æ—Ä', '–ê–Ω–Ω–∞', '–†–æ–º–∞–Ω'
];

const CATEGORIES = [
    '–¢–µ—Ö–Ω–∏–∫–∞', '–î–∏–∑–∞–π–Ω', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ü–æ–¥–¥–µ—Ä–∂–∫–∞', '–ü—Ä–æ–¥–∞–∂–∏',
    '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'HR', '–§–∏–Ω–∞–Ω—Å—ã', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'
];

function generateItem(id: number): Item {
    return {
        id,
        name: `${NAMES[id % NAMES.length]} ${id}`,
        category: CATEGORIES[(id * SEED) % CATEGORIES.length],
    };
}

// --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º ---
function getCachedItem(id: number): Item {
    if (appState.itemsCache.has(id)) {
        return appState.itemsCache.get(id)!;
    }

    const item = generateItem(id);
    appState.itemsCache.set(id, item);
    return item;
}

// --- –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–∞ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è) ---
let appState = {
    selectedItems: new Set<number>(),
    customOrder: [] as number[], // –µ—Å–ª–∏ –ø—É—Å—Ç ‚Äî –∑–Ω–∞—á–∏—Ç, –ø–æ—Ä—è–¥–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    itemsCache: new Map<number, Item>(), // –ö—ç—à: id ‚Üí Item
};

app.get('/', (req: any, res: any) => {
    res.send('Hello World!')
})

app.get('/items', (req: Request, res: Response<ItemsResponse>) => {
    const page = Math.max(1, parseInt(req.query.page as string, 10) || 1);
    const search = (req.query.search as string) || '';

    const offset = (page - 1) * PAGE_SIZE;
    const limit = PAGE_SIZE;
    const end = offset + limit; // —ç–ª–µ–º–µ–Ω—Ç—ã [offset, end)

    let items: Item[] = [];

    if (search) {
        let foundIndex = 0
        const searchNormalized = search.toLowerCase();
        for (let id = 1; id <= TOTAL_ITEMS; id++) {
            if (id.toString().indexOf(searchNormalized) !== -1) {
                if (foundIndex >= offset && foundIndex < end) {
                    items.push(getCachedItem(id))
                }
                foundIndex++
            }
        }

        return res.json({
            items,
            search: search,
            total: foundIndex,
            page,
            pageSize: PAGE_SIZE,
            hasMore: foundIndex > end
        });
    }


    if (!search) {
        const fromIndex = offset;
        const toIndex = Math.min(end, TOTAL_ITEMS);
        for (let index = fromIndex; index < toIndex; index++) {
            const id = index + 1; // ID = index + 1
            items.push(getCachedItem(id));
        }

        return res.json({
            items,
            total: TOTAL_ITEMS,
            page,
            pageSize: PAGE_SIZE,
            hasMore: end < TOTAL_ITEMS
        });
    }
})

app.listen(port, () => {
    console.log(`Example app listening on port ${port}`)
})