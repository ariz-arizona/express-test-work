import type { Item, ItemsResponse } from './types'
import type { Response, Request } from 'express'

const express = require('express')
const cors = require('cors')
const app = express()
const port = 8000

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
const TOTAL_ITEMS = 1_000_000;
const PAGE_SIZE = 20;

// –°–ª—É—á–∞–π–Ω—ã–π seed –æ—Ç 10 –¥–æ 50 –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
const SEED = Math.floor(Math.random() * 41) + 10; // –æ—Ç 10 –¥–æ 50
console.log(`üé≤ –°–ª—É—á–∞–π–Ω—ã–π SEED –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${SEED}`);

// –†—É—Å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
const NAMES = [
    '–ê–ª–µ–∫—Å–µ–π', '–ú–∞—Ä–∏—è', '–î–º–∏—Ç—Ä–∏–π', '–ï–ª–µ–Ω–∞', '–°–µ—Ä–≥–µ–π',
    '–û–ª—å–≥–∞', '–ò–≤–∞–Ω', '–ù–∞—Ç–∞–ª—å—è', '–ê–Ω–¥—Ä–µ–π', '–¢–∞—Ç—å—è–Ω–∞',
    '–ö–∏—Ä–∏–ª–ª', '–Æ–ª–∏—è', '–í–∏–∫—Ç–æ—Ä', '–ê–Ω–Ω–∞', '–†–æ–º–∞–Ω'
];

const CATEGORIES = [
    '–¢–µ—Ö–Ω–∏–∫–∞', '–î–∏–∑–∞–π–Ω', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ü–æ–¥–¥–µ—Ä–∂–∫–∞', '–ü—Ä–æ–¥–∞–∂–∏',
    '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'HR', '–§–∏–Ω–∞–Ω—Å—ã', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'
];

function generateItem(id: number): Item {
    return {
        id,
        name: `${NAMES[id % NAMES.length]} ${id}`,
        category: CATEGORIES[(id * SEED) % CATEGORIES.length],
    };
}

// --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º ---
function getCachedItem(id: number): Item {
    if (appState.itemsCache.has(id)) {
        return appState.itemsCache.get(id)!;
    }

    const item = generateItem(id);
    appState.itemsCache.set(id, item);
    return item;
}

// --- –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–∞ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è) ---
let appState = {
    selectedItems: new Set<number>(),
    order: Array.from({ length: TOTAL_ITEMS }, (_, i) => i + 1),
    itemsCache: new Map<number, Item>(), // –ö—ç—à: id ‚Üí Item
    search: '',           // —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    currentPage: 1,       // —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
};
app.use(cors());
app.use(express.json());
app.get('/', (req: any, res: any) => {
    res.send('Hello World!')
})

app.get('/items', (req: Request, res: Response<ItemsResponse>) => {
    const page = Math.max(1, parseInt(req.query.page as string, 10) || 1);
    const search = (req.query.search as string) || '';

    const offset = (page - 1) * PAGE_SIZE;
    const limit = PAGE_SIZE;
    const end = offset + limit; // —ç–ª–µ–º–µ–Ω—Ç—ã [offset, end)

    appState.search = search

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ ID –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
    const idsInOrder = search
        ? appState.order.filter(id => id.toString().includes(search.toLowerCase()))
        : appState.order;
    const total = idsInOrder.length;

    const pageIds = idsInOrder.slice(offset, end);
    const items = pageIds.map(id => getCachedItem(id));

    return res.json({
        items,
        total,
        page,
        pageSize: PAGE_SIZE,
        hasMore: total > end,
        search: search || undefined,
        selected: Array.from(appState.selectedItems),
    });
})

app.patch('/state', (req: Request, res: Response) => {
    const { oldPageOrder, newPageOrder } = req.body;

    // --- –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
    if (!Array.isArray(oldPageOrder) || !Array.isArray(newPageOrder)) {
        return res.status(400).json({ error: 'oldPageOrder and newPageOrder must be arrays' });
    }

    if (oldPageOrder.length === 0) {
        return res.status(400).json({ error: 'oldPageOrder cannot be empty' });
    }

    if (oldPageOrder.length !== newPageOrder.length) {
        return res.status(400).json({ error: 'oldPageOrder and newPageOrder must have the same length' });
    }

    // --- –ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞, –≥–¥–µ oldPageOrder –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –∫–∞–∫ –ø–æ–¥–º–∞—Å—Å–∏–≤ –≤ appState.order ---
    const order = appState.order;
    let matchIndex = -1;

    for (let i = 0; i <= order.length - oldPageOrder.length; i++) {
        let found = true;
        for (let j = 0; j < oldPageOrder.length; j++) {
            if (order[i + j] !== oldPageOrder[j]) {
                found = false;
                break;
            }
        }
        if (found) {
            matchIndex = i;
            break;
        }
    }

    // --- –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ---
    if (matchIndex === -1) {
        return res.status(409).json({
            error: 'Conflict: The provided oldPageOrder was not found in the current state',
            currentState: order,
            received: oldPageOrder,
        });
    }

    // --- –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è ---
    for (let i = 0; i < newPageOrder.length; i++) {
        order[matchIndex + i] = newPageOrder[i];
    }

    // --- –û—Ç–≤–µ—Ç ---
    res.status(200).json({
        success: true,
        message: 'Order updated successfully',
        updatedRange: {
            start: matchIndex,
            end: matchIndex + newPageOrder.length - 1,
        },
    });
});
app.post('/selected', (req: Request, res: Response) => {
    const { selectedIds } = req.body;

    // --- –í–∞–ª–∏–¥–∞—Ü–∏—è ---
    if (!Array.isArray(selectedIds)) {
        return res.status(400).json({
            error: 'selectedIds must be an array of numbers'
        });
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —á–∏—Å–ª–∞
    const validIds = selectedIds
        .map(id => Number(id))
        .filter(id => !isNaN(id) && id >= 1 && id <= TOTAL_ITEMS);

    // --- –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---
    appState.selectedItems = new Set(validIds);

    // --- –û—Ç–≤–µ—Ç ---
    res.status(200).json({
        success: true,
        message: 'Selected items updated successfully',
        count: validIds.length,
        selectedIds: validIds // –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –º–Ω–æ–≥–æ
    });
});
app.listen(port, () => {
    console.log(`Example app listening on port ${port}`)
})