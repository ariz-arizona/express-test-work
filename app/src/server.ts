import type { Item, ItemsResponse } from './types'
import type { Response, Request } from 'express'

const express = require('express')
const app = express()
const port = 8000

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
const TOTAL_ITEMS = 1_000_000;
const PAGE_SIZE = 20;

// –°–ª—É—á–∞–π–Ω—ã–π seed –æ—Ç 10 –¥–æ 50 –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
const SEED = Math.floor(Math.random() * 41) + 10; // –æ—Ç 10 –¥–æ 50
console.log(`üé≤ –°–ª—É—á–∞–π–Ω—ã–π SEED –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${SEED}`);

// –†—É—Å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
const NAMES = [
    '–ê–ª–µ–∫—Å–µ–π', '–ú–∞—Ä–∏—è', '–î–º–∏—Ç—Ä–∏–π', '–ï–ª–µ–Ω–∞', '–°–µ—Ä–≥–µ–π',
    '–û–ª—å–≥–∞', '–ò–≤–∞–Ω', '–ù–∞—Ç–∞–ª—å—è', '–ê–Ω–¥—Ä–µ–π', '–¢–∞—Ç—å—è–Ω–∞',
    '–ö–∏—Ä–∏–ª–ª', '–Æ–ª–∏—è', '–í–∏–∫—Ç–æ—Ä', '–ê–Ω–Ω–∞', '–†–æ–º–∞–Ω'
];

const CATEGORIES = [
    '–¢–µ—Ö–Ω–∏–∫–∞', '–î–∏–∑–∞–π–Ω', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ü–æ–¥–¥–µ—Ä–∂–∫–∞', '–ü—Ä–æ–¥–∞–∂–∏',
    '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'HR', '–§–∏–Ω–∞–Ω—Å—ã', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'
];

function generateItem(id: number): Item {
    return {
        id,
        name: `${NAMES[id % NAMES.length]} ${id}`,
        category: CATEGORIES[(id * SEED) % CATEGORIES.length],
    };
}

// --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º ---
function getCachedItem(id: number): Item {
    if (appState.itemsCache.has(id)) {
        return appState.itemsCache.get(id)!;
    }

    const item = generateItem(id);
    appState.itemsCache.set(id, item);
    return item;
}

// --- –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–∞ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è) ---
let appState = {
    selectedItems: new Set<number>(),
    order: Array.from({ length: TOTAL_ITEMS }, (_, i) => i + 1),
    itemsCache: new Map<number, Item>(), // –ö—ç—à: id ‚Üí Item
};

app.get('/', (req: any, res: any) => {
    res.send('Hello World!')
})

app.get('/items', (req: Request, res: Response<ItemsResponse>) => {
    const page = Math.max(1, parseInt(req.query.page as string, 10) || 1);
    const search = (req.query.search as string) || '';

    const offset = (page - 1) * PAGE_SIZE;
    const limit = PAGE_SIZE;
    const end = offset + limit; // —ç–ª–µ–º–µ–Ω—Ç—ã [offset, end)

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ ID –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
    const idsInOrder = search
        ? appState.order.filter(id => id.toString().includes(search.toLowerCase()))
        : appState.order;
    const total = idsInOrder.length;

    const pageIds = idsInOrder.slice(offset, end);
    const items = pageIds.map(id => getCachedItem(id));

    return res.json({
        items,
        total,
        page,
        pageSize: PAGE_SIZE,
        hasMore: total > end,
        search: search || undefined,
    });
})
app.listen(port, () => {
    console.log(`Example app listening on port ${port}`)
})